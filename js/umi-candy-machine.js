// ============================================
// UMI CANDY MACHINE V3 - REAL MINT
// ============================================

const UmiCandyMachine = {
    // –¢–≤–æ—è Candy Machine (–∏–∑ candy-machine-config.json)
    CANDY_MACHINE_ID: '3Y82dFzikkzTzEk4vDgvHHeyQwap3M2Z7Zbz4Tj6TbJB',
    COLLECTION_MINT: 'EHju5kq2SvPrqFMEYZ8FkXfX3FYPNsFinaQVU6bFtJRT',
    
    umi: null,
    wallet: null,
    
    /**
     * –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ Umi SDK
     */
    async waitForUmiSDK() {
        if (window.UmiLoader) {
            console.log('üîÑ Using UmiLoader to load SDK...');
            return await window.UmiLoader.waitForUmiSDK();
        } else {
            // Fallback to old method
            const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            let attempts = 0;
            
            while (attempts < maxAttempts) {
                if (window['@metaplex-foundation/umi-bundle-defaults'] && 
                    window['@metaplex-foundation/mpl-candy-machine']) {
                    console.log('‚úÖ Umi SDK loaded successfully');
                    return true;
                }
                
                console.log(`‚è≥ Waiting for Umi SDK... (${attempts + 1}/${maxAttempts})`);
                await new Promise(resolve => setTimeout(resolve, 100));
                attempts++;
            }
            
            throw new Error('Umi SDK failed to load after 5 seconds');
        }
    },
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Umi
     */
    async init(wallet) {
        try {
            console.log('üöÄ Initializing Umi for Candy Machine...');
            
            this.wallet = wallet;
            
            // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ Umi SDK
            await this.waitForUmiSDK();
            
            // –°–æ–∑–¥–∞–µ–º Umi instance —Å devnet
            const { createUmi } = window['@metaplex-foundation/umi-bundle-defaults'];
            this.umi = createUmi('https://api.devnet.solana.com');
            
            console.log('‚úÖ Umi initialized');
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω Candy Machine
            const { mplCandyMachine } = window['@metaplex-foundation/mpl-candy-machine'];
            this.umi.use(mplCandyMachine());
            
            console.log('‚úÖ Candy Machine plugin registered');
            
            // –°–æ–∑–¥–∞–µ–º wallet adapter –¥–ª—è Phantom
            const walletAdapter = this.createPhantomWalletAdapter(wallet);
            this.umi.use(walletAdapter);
            
            console.log('‚úÖ Wallet adapter connected');
            console.log('üç¨ Candy Machine ID:', this.CANDY_MACHINE_ID);
            
            return true;
        } catch (error) {
            console.error('‚ùå Failed to initialize Umi:', error);
            return false;
        }
    },
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç wallet adapter –¥–ª—è Phantom
     */
    createPhantomWalletAdapter(phantomWallet) {
        const { walletAdapterIdentity } = window['@metaplex-foundation/umi'];
        const { publicKey } = window['@metaplex-foundation/umi'];
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Phantom wallet –≤ Umi wallet
        const umiWallet = {
            publicKey: publicKey(phantomWallet.publicKey.toString()),
            signMessage: async (message) => {
                const result = await phantomWallet.signMessage(message);
                return result.signature;
            },
            signTransaction: async (transaction) => {
                return await phantomWallet.signTransaction(transaction);
            },
            signAllTransactions: async (transactions) => {
                return await phantomWallet.signAllTransactions(transactions);
            }
        };
        
        return walletAdapterIdentity(umiWallet);
    },
    
    /**
     * –†–ï–ê–õ–¨–ù–´–ô –ú–ò–ù–¢ NFT —á–µ—Ä–µ–∑ Candy Machine v3
     */
    async mintNFT() {
        if (!this.umi || !this.wallet) {
            throw new Error('Umi not initialized. Call init() first.');
        }
        
        try {
            console.log('üç¨ Starting Candy Machine mint...');
            
            const { fetchCandyMachine, mintV2 } = window['@metaplex-foundation/mpl-candy-machine'];
            const { publicKey, generateSigner, transactionBuilder } = window['@metaplex-foundation/umi'];
            
            // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º Candy Machine
            const candyMachineId = publicKey(this.CANDY_MACHINE_ID);
            console.log('üì• Loading Candy Machine:', this.CANDY_MACHINE_ID);
            
            const candyMachine = await fetchCandyMachine(this.umi, candyMachineId);
            console.log('‚úÖ Candy Machine loaded');
            console.log('üìä Items redeemed:', candyMachine.itemsRedeemed, '/', candyMachine.data.itemsAvailable);
            
            // 2. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π NFT mint
            const nftMint = generateSigner(this.umi);
            console.log('üîë Generated NFT Mint:', nftMint.publicKey.toString());
            
            // 3. –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –º–∏–Ω—Ç–∞
            console.log('üìù Creating mint transaction...');
            
            const mintBuilder = await transactionBuilder()
                .add(mintV2(this.umi, {
                    candyMachine: candyMachineId,
                    nftMint: nftMint,
                    collectionMint: publicKey(this.COLLECTION_MINT),
                    collectionUpdateAuthority: candyMachine.authority,
                    mintArgs: {
                        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å mintArgs –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    }
                }));
            
            console.log('üì§ Sending transaction...');
            
            // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const { signature } = await mintBuilder.sendAndConfirm(this.umi);
            
            console.log('‚úÖ NFT MINTED SUCCESSFULLY!');
            console.log('üìù Signature:', signature);
            console.log('üé® NFT Mint Address:', nftMint.publicKey.toString());
            
            // 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞—Ç—É NFT
            const metadata = await this.loadNFTMetadata(nftMint.publicKey.toString());
            
            return {
                success: true,
                mintAddress: nftMint.publicKey.toString(),
                signature: signature,
                metadata: metadata,
                explorerUrl: `https://explorer.solana.com/address/${nftMint.publicKey.toString()}?cluster=devnet`
            };
            
        } catch (error) {
            console.error('‚ùå Mint failed:', error);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if (error.message.includes('insufficient funds')) {
                throw new Error('Insufficient SOL balance. Get devnet SOL from faucet.');
            } else if (error.message.includes('already been processed')) {
                throw new Error('Transaction already processed. Check your wallet.');
            } else {
                throw error;
            }
        }
    },
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞—Ç—É NFT
     */
    async loadNFTMetadata(mintAddress) {
        try {
            console.log('üì• Loading NFT metadata for:', mintAddress);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é –º–µ—Ç–∞–¥–∞—Ç—É –¥–ª—è –∏–≥—Ä—ã
            const types = ['cat', 'dog', 'dragon', 'fox', 'bear', 'rabbit', 'panda', 'lion', 'unicorn', 'wolf'];
            const emojis = ['üê±', 'üê∂', 'üêâ', 'ü¶ä', 'üêª', 'üê∞', 'üêº', 'ü¶Å', 'ü¶Ñ', 'üê∫'];
            const rarities = ['common', 'rare', 'epic', 'legendary'];
            
            // –†–∞—Ä–∏—Ç–∏ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º
            const rand = Math.random() * 100;
            let rarity;
            if (rand < 70) rarity = 'common';
            else if (rand < 90) rarity = 'rare';
            else if (rand < 98) rarity = 'epic';
            else rarity = 'legendary';
            
            // –†–∞–Ω–¥–æ–º–Ω—ã–π —Ç–∏–ø
            const typeIndex = Math.floor(Math.random() * types.length);
            
            return {
                name: `Tamagotchi #${mintAddress.slice(0, 4)}`,
                symbol: 'TAMA',
                description: 'A unique Solana Tamagotchi NFT pet',
                image: `https://arweave.net/tamagotchi-${types[typeIndex]}.png`, // TODO: —Ä–µ–∞–ª—å–Ω—ã–π URL
                attributes: [
                    { trait_type: 'Type', value: types[typeIndex] },
                    { trait_type: 'Rarity', value: rarity },
                    { trait_type: 'Generation', value: '1' },
                    { trait_type: 'Evolution', value: 'Baby' }
                ],
                // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã
                gameData: {
                    type: types[typeIndex],
                    emoji: emojis[typeIndex],
                    rarity: rarity,
                    level: 1,
                    xp: 0,
                    evolution: 0
                }
            };
        } catch (error) {
            console.error('Failed to load metadata:', error);
            return null;
        }
    },
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Candy Machine
     */
    async getCandyMachineInfo() {
        if (!this.umi) {
            console.error('‚ùå Umi not initialized');
            return null;
        }
        
        try {
            const { fetchCandyMachine } = window['@metaplex-foundation/mpl-candy-machine'];
            const { publicKey } = window['@metaplex-foundation/umi'];
            
            const candyMachineId = publicKey(this.CANDY_MACHINE_ID);
            const candyMachine = await fetchCandyMachine(this.umi, candyMachineId);
            
            return {
                exists: true,
                address: this.CANDY_MACHINE_ID,
                itemsAvailable: candyMachine.data.itemsAvailable,
                itemsRedeemed: candyMachine.itemsRedeemed,
                itemsRemaining: candyMachine.data.itemsAvailable - candyMachine.itemsRedeemed,
                price: candyMachine.data.price?.sol?.basisPoints || 0,
                goLiveDate: candyMachine.data.goLiveDate
            };
        } catch (error) {
            console.error('Error getting Candy Machine info:', error);
            return null;
        }
    },
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–Ω–∏—è NFT –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
     */
    async checkNFTOwnership(walletAddress) {
        try {
            console.log('üîç Checking NFT ownership for:', walletAddress);
            
            const { publicKey } = window['@metaplex-foundation/umi'];
            const { fetchAllDigitalAssetByOwner } = window['@metaplex-foundation/mpl-token-metadata'];
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ NFT –∫–æ—à–µ–ª—å–∫–∞
            const owner = publicKey(walletAddress);
            const nfts = await fetchAllDigitalAssetByOwner(this.umi, owner);
            
            console.log(`üì¶ Found ${nfts.length} NFTs in wallet`);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º NFT –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            const collectionId = publicKey(this.COLLECTION_MINT);
            const ourNFTs = nfts.filter(nft => {
                return nft.metadata?.collection?.key === collectionId.toString();
            });
            
            console.log(`‚úÖ Found ${ourNFTs.length} Tamagotchi NFTs`);
            
            if (ourNFTs.length > 0) {
                return {
                    hasNFT: true,
                    nfts: ourNFTs,
                    firstNFT: ourNFTs[0].publicKey.toString()
                };
            }
            
            return {
                hasNFT: false,
                nfts: []
            };
            
        } catch (error) {
            console.error('Error checking NFT ownership:', error);
            return {
                hasNFT: false,
                nfts: [],
                error: error.message
            };
        }
    }
};

// Export
window.UmiCandyMachine = UmiCandyMachine;

console.log('‚úÖ Umi Candy Machine module loaded');

