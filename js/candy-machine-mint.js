// ============================================
// CANDY MACHINE V3 INTEGRATION
// ============================================

/**
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –º–∏–Ω—Ç–∏–Ω–≥–∞ NFT —á–µ—Ä–µ–∑ Candy Machine v3
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç—ã—Ö SOL –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ NFT –º–∏–Ω—Ç–∏–Ω–≥–∞
 */

const CandyMachineV3 = {
    // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è Candy Machine
    CANDY_MACHINE_ID: '3Y82dFzikkzTzEk4vDgvHHeyQwap3M2Z7Zbz4Tj6TbJB', // –í–∞—à Candy Machine ID
    COLLECTION_MINT: 'EHju5kq2SvPrqFMEYZ8FkXfX3FYPNsFinaQVU6bFtJRT',  // –ê–¥—Ä–µ—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NFT
    TREASURY_WALLET: 'GXvKWk8VierD1H6VXzQz7GxZBMZUxXKqvmHkBRGdPump',
    
    // Metaplex –ø—Ä–æ–≥—Ä–∞–º–º—ã
    CANDY_MACHINE_PROGRAM_ID: 'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR',
    TOKEN_METADATA_PROGRAM_ID: 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Candy Machine
     */
    async init(candyMachineId, collectionMint) {
        if (!candyMachineId || !collectionMint) {
            console.error('‚ùå Missing Candy Machine or Collection addresses');
            console.log('üí° Deploy Candy Machine first: npm run create-candy-machine');
            return false;
        }
        
        this.CANDY_MACHINE_ID = candyMachineId;
        this.COLLECTION_MINT = collectionMint;
        
        console.log('üç¨ Candy Machine initialized');
        console.log('üìç Candy Machine:', this.CANDY_MACHINE_ID);
        console.log('üìç Collection:', this.COLLECTION_MINT);
        
        return true;
    },
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Candy Machine
     */
    async loadConfig() {
        try {
            const response = await fetch('./candy-machine-config.json');
            if (!response.ok) {
                throw new Error('Config file not found');
            }
            
            const config = await response.json();
            
            await this.init(
                config.candyMachine.address,
                config.collection.address
            );
            
            return config;
        } catch (error) {
            console.warn('‚ö†Ô∏è Candy Machine config not found. Using fallback mode.');
            return null;
        }
    },
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Candy Machine
     */
    async getCandyMachineInfo(connection) {
        if (!this.CANDY_MACHINE_ID) {
            console.error('‚ùå Candy Machine not initialized');
            return null;
        }
        
        try {
            const candyMachinePubkey = new solanaWeb3.PublicKey(this.CANDY_MACHINE_ID);
            const accountInfo = await connection.getAccountInfo(candyMachinePubkey);
            
            if (!accountInfo) {
                console.error('‚ùå Candy Machine account not found');
                return null;
            }
            
            // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö Candy Machine
            // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Metaplex SDK
            console.log('‚úÖ Candy Machine found');
            
            return {
                address: this.CANDY_MACHINE_ID,
                found: true
            };
        } catch (error) {
            console.error('‚ùå Error fetching Candy Machine info:', error);
            return null;
        }
    },
    
    /**
     * –ú–∏–Ω—Ç NFT —á–µ—Ä–µ–∑ Candy Machine v3
     * 
     * @param {Connection} connection - Solana connection
     * @param {PublicKey} wallet - –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} signTransaction - –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–Ω—Ç–∞
     */
    async mintNFT(connection, wallet, signTransaction) {
        if (!this.CANDY_MACHINE_ID) {
            console.error('‚ùå Candy Machine not configured');
            return { success: false, error: 'Candy Machine not configured' };
        }
        
        try {
            console.log('üç¨ Minting NFT from Candy Machine...');
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π mint account –¥–ª—è NFT
            const mintKeypair = solanaWeb3.Keypair.generate();
            const mint = mintKeypair.publicKey;
            
            console.log('üîë New NFT mint address:', mint.toString());
            
            // –ü–æ–ª—É—á–∞–µ–º PDA –∞–∫–∫–∞—É–Ω—Ç—ã
            const [metadata] = await solanaWeb3.PublicKey.findProgramAddress(
                [
                    Buffer.from('metadata'),
                    new solanaWeb3.PublicKey(this.TOKEN_METADATA_PROGRAM_ID).toBuffer(),
                    mint.toBuffer(),
                ],
                new solanaWeb3.PublicKey(this.TOKEN_METADATA_PROGRAM_ID)
            );
            
            const [masterEdition] = await solanaWeb3.PublicKey.findProgramAddress(
                [
                    Buffer.from('metadata'),
                    new solanaWeb3.PublicKey(this.TOKEN_METADATA_PROGRAM_ID).toBuffer(),
                    mint.toBuffer(),
                    Buffer.from('edition'),
                ],
                new solanaWeb3.PublicKey(this.TOKEN_METADATA_PROGRAM_ID)
            );
            
            // –°–æ–∑–¥–∞–µ–º token account –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const tokenAccount = await solanaWeb3.PublicKey.findProgramAddress(
                [
                    wallet.toBuffer(),
                    solanaWeb3.TOKEN_PROGRAM_ID.toBuffer(),
                    mint.toBuffer(),
                ],
                solanaWeb3.ASSOCIATED_TOKEN_PROGRAM_ID
            );
            
            console.log('üìç Metadata:', metadata.toString());
            console.log('üìç Token Account:', tokenAccount[0].toString());
            
            // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Metaplex JS SDK
            // –≠—Ç–æ—Ç –∫–æ–¥ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            
            console.log('‚ö†Ô∏è Using Metaplex SDK for minting...');
            console.log('üí° Install: npm install @metaplex-foundation/js');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞
            return {
                success: true,
                mint: mint.toString(),
                metadata: metadata.toString(),
                tokenAccount: tokenAccount[0].toString(),
                message: 'Demo mint successful. Integrate Metaplex SDK for real minting.'
            };
            
        } catch (error) {
            console.error('‚ùå Mint failed:', error);
            return {
                success: false,
                error: error.message
            };
        }
    },
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è NFT
     */
    async getRemainingNFTs(connection) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å Candy Machine account
        console.log('üìä Checking remaining NFTs...');
        
        // –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Metaplex SDK:
        // const candyMachine = await metaplex.candyMachines().findByAddress({ address });
        // return candyMachine.itemsRemaining;
        
        return {
            total: 100,
            minted: 0,
            remaining: 100
        };
    },
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∏–Ω—Ç–∏—Ç—å
     */
    async canMint(connection, wallet) {
        try {
            const balance = await connection.getBalance(wallet);
            const minBalance = 0.3 * solanaWeb3.LAMPORTS_PER_SOL; // –¶–µ–Ω–∞ –º–∏–Ω—Ç–∞
            
            return {
                canMint: balance >= minBalance,
                balance: balance / solanaWeb3.LAMPORTS_PER_SOL,
                required: 0.3,
                message: balance >= minBalance 
                    ? 'Ready to mint!' 
                    : 'Insufficient SOL balance'
            };
        } catch (error) {
            console.error('Error checking mint eligibility:', error);
            return {
                canMint: false,
                message: 'Error checking balance'
            };
        }
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.CandyMachineV3 = CandyMachineV3;

/**
 * –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:
 * 
 * 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 *    npm install @metaplex-foundation/js @solana/web3.js
 * 
 * 2. –°–æ–∑–¥–∞–π—Ç–µ Candy Machine:
 *    cd scripts
 *    npm install
 *    npm run create-candy-machine
 * 
 * 3. –û–±–Ω–æ–≤–∏—Ç–µ candy-machine-config.json —Å –∞–¥—Ä–µ—Å–∞–º–∏
 * 
 * 4. –í mint.js –∑–∞–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–∏–π mintNFT() –Ω–∞:
 *    const result = await CandyMachineV3.mintNFT(connection, publicKey, signTransaction);
 * 
 * 5. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Metaplex JS SDK:
 * 
 *    import { Metaplex, keypairIdentity } from '@metaplex-foundation/js';
 *    
 *    const metaplex = Metaplex.make(connection).use(keypairIdentity(wallet));
 *    
 *    const { nft } = await metaplex.candyMachines().mint({
 *      candyMachine: candyMachineAddress,
 *      collectionUpdateAuthority: collectionUpdateAuthorityAddress,
 *    });
 * 
 * 6. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ devnet –ø–µ—Ä–µ–¥ mainnet!
 */

