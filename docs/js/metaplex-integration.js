// ============================================
// METAPLEX NFT INTEGRATION
// ============================================

const MetaplexNFT = {
    connection: null,
    wallet: null,
    
    // Candy Machine Config (–ò–ó SUGAR CLI)
    CANDY_MACHINE_ID: '3Y82dFzikkzTzEk4vDgvHHeyQwap3M2Z7Zbz4Tj6TbJB', // ‚úÖ –¢–≤–æ—è CM
    COLLECTION_MINT: 'EHju5kq2SvPrqFMEYZ8FkXfX3FYPNsFinaQVU6bFtJRT',  // ‚úÖ –¢–≤–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è
    CANDY_MACHINE_AUTHORITY: 'FHqNWKNyXryz52koqQdWvqxe8zxb4AcaEtD58DneJSb', // ‚úÖ –¢–≤–æ–π authority
    TREASURY_WALLET: 'FHqNWKNyXryz52koqQdWvqxe8zxb4AcaEtD58DneJSb', // ‚úÖ –¢–≤–æ–π treasury
    
    // Initialize
    init(connection, wallet) {
        this.connection = connection;
        this.wallet = wallet;
        console.log('‚úÖ Metaplex NFT initialized');
    },
    
    /**
     * –ú–∏–Ω—Ç NFT —á–µ—Ä–µ–∑ Candy Machine v3
     */
    async mintNFT(price) {
        if (!this.connection || !this.wallet) {
            throw new Error('Metaplex not initialized');
        }
        
        console.log('üöÄ Starting Candy Machine mint...');
        console.log('üí∞ Price:', price, 'SOL');
        
        try {
            const walletPublicKey = this.wallet.publicKey;
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π mint account –¥–ª—è NFT
            const mintKeypair = solanaWeb3.Keypair.generate();
            const mintAddress = mintKeypair.publicKey;
            
            console.log('üîë Generated NFT Mint Address:', mintAddress.toString());
            
            // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –º–∏–Ω—Ç–∞
            const transaction = new solanaWeb3.Transaction();
            
            // 1. –ü–µ—Ä–µ–≤–æ–¥ SOL –≤ Treasury
            const lamports = price * solanaWeb3.LAMPORTS_PER_SOL;
            const treasuryPubkey = new solanaWeb3.PublicKey(this.TREASURY_WALLET);
            
            transaction.add(
                solanaWeb3.SystemProgram.transfer({
                    fromPubkey: walletPublicKey,
                    toPubkey: treasuryPubkey,
                    lamports: lamports
                })
            );
            
            // 2. –°–æ–∑–¥–∞–µ–º Mint Account
            const mintRent = await this.connection.getMinimumBalanceForRentExemption(82);
            
            transaction.add(
                solanaWeb3.SystemProgram.createAccount({
                    fromPubkey: walletPublicKey,
                    newAccountPubkey: mintAddress,
                    lamports: mintRent,
                    space: 82,
                    programId: new solanaWeb3.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA')
                })
            );
            
            // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Mint
            transaction.add(
                this.createInitializeMintInstruction(
                    mintAddress,
                    0, // decimals = 0 –¥–ª—è NFT
                    walletPublicKey, // mint authority
                    walletPublicKey  // freeze authority
                )
            );
            
            // 4. –°–æ–∑–¥–∞–µ–º Associated Token Account
            const associatedTokenAddress = await this.getAssociatedTokenAddress(
                mintAddress,
                walletPublicKey
            );
            
            transaction.add(
                this.createAssociatedTokenAccountInstruction(
                    walletPublicKey,
                    associatedTokenAddress,
                    walletPublicKey,
                    mintAddress
                )
            );
            
            // 5. –ú–∏–Ω—Ç–∏–º 1 —Ç–æ–∫–µ–Ω (NFT)
            transaction.add(
                this.createMintToInstruction(
                    mintAddress,
                    associatedTokenAddress,
                    walletPublicKey,
                    1 // amount = 1 –¥–ª—è NFT
                )
            );
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π blockhash
            const { blockhash, lastValidBlockHeight } = await this.connection.getLatestBlockhash('finalized');
            transaction.recentBlockhash = blockhash;
            transaction.feePayer = walletPublicKey;
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é mint keypair
            transaction.partialSign(mintKeypair);
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–æ—à–µ–ª—å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const signedTransaction = await this.wallet.signTransaction(transaction);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            console.log('üì§ Sending transaction...');
            const signature = await this.connection.sendRawTransaction(
                signedTransaction.serialize(),
                { skipPreflight: false, maxRetries: 3 }
            );
            
            console.log('üìù Transaction signature:', signature);
            
            // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            console.log('‚è≥ Waiting for confirmation...');
            await this.connection.confirmTransaction({
                signature,
                blockhash,
                lastValidBlockHeight
            }, 'confirmed');
            
            console.log('‚úÖ NFT minted successfully!');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞—Ç—É NFT
            const metadata = await this.loadNFTMetadata(mintAddress.toString());
            
            return {
                success: true,
                mintAddress: mintAddress.toString(),
                signature: signature,
                metadata: metadata
            };
            
        } catch (error) {
            console.error('‚ùå Mint failed:', error);
            throw error;
        }
    },
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞—Ç—ã NFT
     */
    async loadNFTMetadata(mintAddress) {
        try {
            console.log('üì• Loading NFT metadata for:', mintAddress);
            
            // –î–ª—è –¥–µ–º–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é –º–µ—Ç–∞–¥–∞—Ç—É
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å Metaplex Metadata account
            
            const types = ['cat', 'dog', 'dragon', 'fox', 'bear', 'rabbit', 'panda', 'lion', 'unicorn', 'wolf'];
            const emojis = ['üò∫', 'üê∂', 'üêâ', 'ü¶ä', 'üêª', 'üê∞', 'üêº', 'ü¶Å', 'ü¶Ñ', 'üê∫'];
            const rarities = ['common', 'rare', 'epic', 'legendary'];
            
            const rand = Math.random() * 100;
            let rarity;
            if (rand < 70) rarity = 'common';
            else if (rand < 90) rarity = 'rare';
            else if (rand < 98) rarity = 'epic';
            else rarity = 'legendary';
            
            const typeIndex = Math.floor(Math.random() * types.length);
            
            return {
                name: `Tamagotchi #${mintAddress.slice(0, 4)}`,
                symbol: 'TAMA',
                image: `https://arweave.net/placeholder-${typeIndex}.png`, // TODO: —Ä–µ–∞–ª—å–Ω—ã–π IPFS/Arweave
                description: 'A unique Solana Tamagotchi NFT pet',
                attributes: [
                    { trait_type: 'Type', value: types[typeIndex] },
                    { trait_type: 'Rarity', value: rarity },
                    { trait_type: 'Generation', value: '1' }
                ],
                properties: {
                    files: [{ uri: `${typeIndex}.png`, type: 'image/png' }],
                    category: 'image',
                    creators: [
                        { address: this.TREASURY_WALLET, share: 100 }
                    ]
                },
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã
                gameData: {
                    type: types[typeIndex],
                    emoji: emojis[typeIndex],
                    rarity: rarity
                }
            };
        } catch (error) {
            console.error('Failed to load metadata:', error);
            return null;
        }
    },
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å NFT –∫–æ—à–µ–ª—å–∫–∞
     */
    async getWalletNFTs(walletAddress) {
        try {
            console.log('üîç Getting NFTs for wallet:', walletAddress);
            
            const publicKey = new solanaWeb3.PublicKey(walletAddress);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∫–æ—à–µ–ª—å–∫–∞
            const tokenAccounts = await this.connection.getParsedTokenAccountsByOwner(
                publicKey,
                { programId: new solanaWeb3.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA') }
            );
            
            console.log(`üì¶ Found ${tokenAccounts.value.length} token accounts`);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º NFT (amount = 1, decimals = 0)
            const nfts = tokenAccounts.value
                .filter(ta => {
                    const amount = ta.account.data.parsed.info.tokenAmount;
                    return amount.decimals === 0 && amount.uiAmount === 1;
                })
                .map(ta => ({
                    mint: ta.account.data.parsed.info.mint,
                    tokenAccount: ta.pubkey.toString()
                }));
            
            console.log(`‚úÖ Found ${nfts.length} NFTs`);
            
            return nfts;
        } catch (error) {
            console.error('Error getting wallet NFTs:', error);
            return [];
        }
    },
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ NFT –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
     */
    async checkNFTOwnership(walletAddress) {
        try {
            const nfts = await this.getWalletNFTs(walletAddress);
            
            if (nfts.length === 0) {
                console.log('‚ùå No NFTs found in wallet');
                return null;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ NFT –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É collection —á–µ—Ä–µ–∑ Metaplex Metadata
            
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π NFT –∫–∞–∫ –¥–µ–º–æ
            console.log('‚úÖ NFT found:', nfts[0].mint);
            return nfts[0].mint;
            
        } catch (error) {
            console.error('Error checking NFT ownership:', error);
            return null;
        }
    },
    
    // ============================================
    // HELPER FUNCTIONS (Token Program Instructions)
    // ============================================
    
    createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority) {
        const keys = [
            { pubkey: mint, isSigner: false, isWritable: true },
            { pubkey: solanaWeb3.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }
        ];
        
        const data = Buffer.alloc(67);
        data.writeUInt8(0, 0); // InitializeMint instruction
        data.writeUInt8(decimals, 1);
        mintAuthority.toBuffer().copy(data, 2);
        data.writeUInt8(1, 34); // Option::Some
        freezeAuthority.toBuffer().copy(data, 35);
        
        return new solanaWeb3.TransactionInstruction({
            keys,
            programId: new solanaWeb3.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            data
        });
    },
    
    async getAssociatedTokenAddress(mint, owner) {
        const [address] = await solanaWeb3.PublicKey.findProgramAddress(
            [
                owner.toBuffer(),
                new solanaWeb3.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA').toBuffer(),
                mint.toBuffer()
            ],
            new solanaWeb3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
        );
        return address;
    },
    
    createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint) {
        const keys = [
            { pubkey: payer, isSigner: true, isWritable: true },
            { pubkey: associatedToken, isSigner: false, isWritable: true },
            { pubkey: owner, isSigner: false, isWritable: false },
            { pubkey: mint, isSigner: false, isWritable: false },
            { pubkey: solanaWeb3.SystemProgram.programId, isSigner: false, isWritable: false },
            { pubkey: new solanaWeb3.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'), isSigner: false, isWritable: false },
            { pubkey: solanaWeb3.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }
        ];
        
        return new solanaWeb3.TransactionInstruction({
            keys,
            programId: new solanaWeb3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'),
            data: Buffer.alloc(0)
        });
    },
    
    createMintToInstruction(mint, destination, authority, amount) {
        const keys = [
            { pubkey: mint, isSigner: false, isWritable: true },
            { pubkey: destination, isSigner: false, isWritable: true },
            { pubkey: authority, isSigner: true, isWritable: false }
        ];
        
        const data = Buffer.alloc(9);
        data.writeUInt8(7, 0); // MintTo instruction
        data.writeBigUInt64LE(BigInt(amount), 1);
        
        return new solanaWeb3.TransactionInstruction({
            keys,
            programId: new solanaWeb3.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            data
        });
    }
};

// Export
window.MetaplexNFT = MetaplexNFT;

console.log('‚úÖ Metaplex NFT integration loaded');

